<project name="DerbyNet" default="dist" basedir=".">
  <description>
    Web-based software for managing pinewood derby races
  </description>

  <property name="timer-dir" location="timer"/>
  <property name="timer-jar-dir" location="${timer-dir}/dist/lib"/>
  <property name="docs-dir" location="docs"/>
  <!-- uniserver-resources is where the downloaded Uniform Server
       self-extracting (.exe) archives are found.  Only available on a
       Windows machine. -->
  <property name="uniserver-resources" location="../uniserver-resources"/>
  <!-- The self-extracting archives get applied to this directory, which can be
       copied to non-Windows build platforms. -->
  <property name="uniserver-unpacked" location="../uniserver-unpacked"/>
  <!-- The content of the .win.zip is staged here, zipped, and then
       deleted. -->
  <property name="uniserver-target" location="dist/uniserver"/>
  <!-- Contains a recent copy of
        https://webrtc.github.io/adapter/adapter-latest.js -->
  <property name="webrtc-adapter-cache" location="adapter-webrtc"/>

  <condition property="is_mac">
    <os family="mac"/>
  </condition>
  <condition property="is_windows">
    <os family="windows"/>
  </condition>

  <!-- Duplicated in docs/build.xml -->
    <property name="soffice"
              location="/Applications/LibreOffice.app/Contents/MacOS/soffice"/>
  <available property="soffice_available" file="${soffice}"/>

  <target name="clean" depends="docs-clean"
          description="Remove generated artifacts for a clean build environment">
    <delete quiet="true">
        <fileset dir="website">
            <filename name="timer.php"/>
        </fileset>
        <fileset dir="website/css">
            <filename name="timer.css"/>
        </fileset>
        <fileset dir="website/inc">
            <filename name="banner.inc"/>
            <filename name="generated-version.inc"/>
            <filename name="generated-build-date.inc"/>
            <filename name="generated-commit-hash.inc"/>
        </fileset>
        <fileset dir="website/js/timer">
            <filename name="**"/>
        </fileset>
    </delete>
    <ant dir="${timer-dir}" target="clean"/>
    <!-- docs-dir gets cleaned up by docs-clean target -->
  </target>
  
  <target name="dist" depends="dist.oneclick, dist.mac, dist.debian"
          description="Build complete distribution"/>

  <target name="dist.zip" depends="timer-jar, timer-in-browser, docs-dist, generated"
          description="Build OS-neutral zip-file distribution">
      <zip destfile="../DerbyNet-${release-series}-${git-rev-count}${git-dirty}-${DSTAMP}.zip">
          <fileset dir=".">
              <include name="MIT-LICENSE.txt"/>
              <include name="README.txt"/>
          </fileset>

          <fileset dir=".">
              <include name="website/**/*"/>
              <exclude name="website/local/**"/>
          </fileset>

          <mappedresources>
              <fileset dir="docs/dist">
                  <include name="**"/>
              </fileset>
              <globmapper from="*" to="docs/*"/>
          </mappedresources>

          <fileset dir="${timer-jar-dir}">
              <include name="*.jar"/>
          </fileset>

          <fileset dir=".">
              <include name="lib/jSSC*src.jar"/>
              <include name="extras/**/*"/>
          </fileset>
      </zip>
  </target>

  <target name="generated" depends="banner, generated-version.inc,
                    generated-build-date.inc,
                    release-series, generated-commit-hash.inc, quickref, webrtc-adapter"
          description="Build generated files">
  </target>

  <target name="webrtc-adapter">
      <mkdir dir="${webrtc-adapter-cache}"/>
      <get src="https://webrtc.github.io/adapter/adapter-latest.js"
           dest="${webrtc-adapter-cache}" ignoreerrors="true"/>
      <copy file="${webrtc-adapter-cache}/adapter-latest.js"
            tofile="website/js/adapter.js" overwrite="true"/>
  </target>

  <target name="generated-version.inc">
      <exec executable="git" outputproperty="git-rev-count">
          <arg value="rev-list"/>
          <arg value="HEAD"/>
          <arg value="--count"/>
      </exec>

      <concat destfile="website/inc/generated-version.inc">
          <propertyresource name="git-rev-count"/>
      </concat>
  </target>

  <target name="generated-build-date.inc">
      <tstamp/>
      <concat destfile="website/inc/generated-build-date.inc">
          <propertyresource name="TODAY"/>
      </concat>
  </target>

  <target name="generated-commit-hash.inc">
      <exec executable="git" outputproperty="git-hash">
          <arg value="rev-parse"/>
          <arg value="HEAD"/>
      </exec>

      <exec executable="git" outputproperty="git-status-short">
          <arg value="status"/>
          <arg value="--short"/>
      </exec>
      <!-- If there's no output, git-status-short doesn't even get set.  If it
           IS set, this property element has no effect. -->
      <property name="git-status-short" value=""/>

      <loadresource property="git-dirty">
          <propertyresource name="git-status-short"/>
          <filterchain>
              <striplinebreaks/>
              <replaceregex pattern=".+" replace="-modified" flags="s"/>
          </filterchain>
      </loadresource>
      <property name="git-dirty" value=""/>

      <concat destfile="website/inc/generated-commit-hash.inc">
          <propertyresource name="git-hash"/>
          <propertyresource name="git-dirty"/>
      </concat>
  </target>

  <target name="release-series">
      <exec executable="git" outputproperty="git-branch">
          <arg value="rev-parse"/>
          <arg value="--abbrev-ref"/>
          <arg value="HEAD"/>
      </exec>
      <loadresource property="release-series">
          <propertyresource name="git-branch"/>
          <filterchain>
              <striplinebreaks/>
              <replaceregex pattern="master" replace="dev" flags="s"/>
          </filterchain>
      </loadresource>
  </target>

  <target name="banner" depends="release-series">
      <loadresource property="banner-release">
          <propertyresource name="git-branch"/>
          <filterchain>
              <striplinebreaks/>
              <replaceregex pattern="master" replace="dev"/>
          </filterchain>
      </loadresource>
      <copy file="templates/banner.inc" tofile="website/inc/banner.inc" overwrite="true">
          <filterchain>
              <replacetokens>
                  <token key="BRANCH" value="${banner-release}"/>
              </replacetokens>
          </filterchain>
      </copy>
  </target>

  <target name="prepare-timer-in-browser">
      <mkdir dir="website/js/timer"/>
  </target>

  <target name="timer.php" depends="generated-version.inc,
                                    generated-build-date.inc, release-series">
        <copy file="templates/timer.html"
            tofile="website/timer.php" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PHP_START" value="&lt;?php"/>
                </replacetokens>
                <replacetokens>
                    <token key="PHP_END" value="?&gt;"/>
                </replacetokens>
                <replacetokens>
                    <token key="ELECTRON_ONLY_START" value="&lt;!--"/>
                </replacetokens>
                <replacetokens>
                    <token key="ELECTRON_ONLY_END" value="--&gt;"/>
                </replacetokens>
                <replacetokens>
                    <token key="BRANCH" value="${release-series}"/>
                </replacetokens>
                <replacetokens>
                    <token key="REV_COUNT" value="${git-rev-count}"/>
                </replacetokens>
                <replacetokens>
                    <token key="BUILD_DATE" value="${TODAY}"/>
                </replacetokens>
          </filterchain>
      </copy>
</target>

  <target name="timer-profiles" depends="timer-jar, prepare-timer-in-browser">
      <!-- java task supposedly supports outputproperty, but it doesn't seem to
           work. -->
      <exec executable="java" outputproperty="timer-profiles">
          <arg value="-cp"/>
          <!-- ${timer-jar-dir} doesn't work in arg value, apparently. -->
          <arg value="timer/dist/lib/derby-timer.jar"/>
          <arg value="org.jeffpiazza.derby.profiles.AllProfiles"/>
      </exec>
      <copy file="templates/timer-profiles.js"
            tofile="website/js/timer/profiles.js" overwrite="true">
          <filterchain>
              <replacetokens>
                  <token key="PROFILES" value="${timer-profiles}"/>
              </replacetokens>
          </filterchain>
      </copy>
  </target>

  <target name="timer-in-browser" depends="timer.php, timer-profiles"
          description="Rebuild timer.php and friends">
      <copy todir="website/js/timer" overwrite="true">
        <fileset dir="timer/derbynet-timer/src/js">
            <include name="*.js"/>
        </fileset>
    </copy>
      <copy todir="website/css" overwrite="true">
        <fileset dir="timer/derbynet-timer/src/css">
            <include name="*.css"/>
        </fileset>
    </copy>
  </target>

  <target name="quickref" depends="docs-dist">
      <copy file="docs/dist/Quick Reference.pdf" tofile="website/quickref.pdf" overwrite="true"/>
  </target>

  <target name="timer-jar" depends="generated"
          description="Builds the jar file for derby-timer">
      <ant dir="${timer-dir}" target="clean"/>
      <ant dir="${timer-dir}" target="timer-jar"/>
  </target>

  <target name="timer-electron" depends="banner, generated-version.inc,
                                    generated-build-date.inc, release-series"
          description="Builds the stand-alone timer application">
      <ant dir="${timer-dir}" target="electron-app"/>
  </target>

  <target name="dist.debian" depends="generated, timer-jar, timer-in-browser, docs-dist"
      description="Build a Debian binary package (.deb) for all of DerbyNet">
    <ant dir="installer/debian" target="dist"/>
  </target>

  <target name="docs-clean" if="soffice_available">
    <ant dir="${docs-dir}"  target="clean"/>
  </target>
  <target name="docs-dist" description="Generate documentation PDFs" if="soffice_available">
      <ant dir="${docs-dir}"/>
  </target>

<target name="mac.installer.website" if="is_mac" depends="generated, timer-in-browser">
    <mkdir dir="ROOT/Library/WebServer/Documents/derbynet"/>
    <copy todir="ROOT/Library/WebServer/Documents/derbynet" overwrite="true">
        <fileset dir="website">
            <include name="**"/>
            <exclude name="local/**"/>
        </fileset>
    </copy>
    <exec executable="/usr/bin/pkgbuild">
        <arg value="--root"/>
        <arg value="ROOT"/>
        <arg value="--scripts"/>
        <arg value="installer/mac/webserver/scripts"/>
        <arg value="--identifier"/>
        <arg value="org.jeffpiazza.derbynet.website"/>
        <arg value="--version"/>
        <arg value="1.0"/>
        <arg value="derbynet.website.pkg"/>
    </exec>
    <delete dir="ROOT"/>
</target>

<target name="mac.installer.timer" if="is_mac" depends="timer-jar">
    <mkdir dir="ROOT/Applications/DerbyNet"/>
    <copy todir="ROOT/Applications/DerbyNet" overwrite="true">
          <fileset dir="${timer-jar-dir}">
              <include name="*.jar"/>
          </fileset>
          <fileset dir="lib">
              <include name="jSSC*src.jar"/>
          </fileset>
    </copy>
    <exec executable="/usr/bin/pkgbuild">
        <arg value="--root"/>
        <arg value="ROOT"/>
        <arg value="--identifier"/>
        <arg value="org.jeffpiazza.derbynet.timer"/>
        <arg value="--version"/>
        <arg value="1.0"/>
        <arg value="derbynet.timer.pkg"/>
    </exec>
    <delete dir="ROOT"/>
</target>

<target name="mac.installer.docs" if="is_mac" depends="docs-dist">
    <mkdir dir="ROOT/Applications/DerbyNet/docs"/>
    <copy todir="ROOT/Applications/DerbyNet" overwrite="true">
        <mappedresources>
            <fileset dir="docs/dist">
                <include name="**"/>
            </fileset>
            <globmapper from="*" to="docs/*"/>
        </mappedresources>
    </copy>
    <exec executable="/usr/bin/pkgbuild">
        <arg value="--root"/>
        <arg value="ROOT"/>
        <arg value="--identifier"/>
        <arg value="org.jeffpiazza.derbynet.docs"/>
        <arg value="--version"/>
        <arg value="1.0"/>
        <arg value="derbynet.docs.pkg"/>
    </exec>
    <delete dir="ROOT"/>
</target>

<target name="mac.installer.extras" if="is_mac">
    <mkdir dir="ROOT/Applications/DerbyNet/extras"/>
    <mkdir dir="ROOT/Applications/DerbyNet/maintenance"/>
    <copy todir="ROOT/Applications/DerbyNet/maintenance">
        <fileset dir="installer/mac/extras/maintenance">
            <include name="after-macos-upgrade.sh"/>
            <include name="stop-apache.sh"/>
        </fileset>
        <fileset dir="installer/mac/webserver/scripts">
            <include name="create-or-update-php-ini.sh"/>
            <include name="update-apache-config.sh"/>
        </fileset>
    </copy>
    <copy todir="ROOT/Library/LaunchDaemons">
        <fileset dir="installer/mac">
            <include name="org.jeffpiazza.derbynet.after-macos-upgrade.plist"/>
        </fileset>
    </copy>
    <copy todir="ROOT/Applications/DerbyNet/Configure MAMP for DerbyNet.app">
        <fileset dir="installer/mac/webserver/Configure MAMP for DerbyNet.app">
        </fileset>
    </copy>
    <chmod perm="+x"
           file="ROOT/Applications/DerbyNet/maintenance/after-macos-upgrade.sh"/>
    <chmod perm="+x"
           file="ROOT/Applications/DerbyNet/maintenance/stop-apache.sh"/>
    <chmod perm="+x"
           file="ROOT/Applications/DerbyNet/maintenance/create-or-update-php-ini.sh"/>
    <chmod perm="+x"
           file="ROOT/Applications/DerbyNet/maintenance/update-apache-config.sh"/>
    <chmod perm="+x"
           file="ROOT/Applications/DerbyNet/Configure MAMP for DerbyNet.app/Contents/MacOS/Automator Application Stub"/>
    <copy todir="ROOT/Applications/DerbyNet/extras">
        <fileset dir="extras"/>
    </copy>
    <exec executable="/usr/bin/pkgbuild">
        <arg value="--root"/>
        <arg value="ROOT"/>
        <arg value="--identifier"/>
        <arg value="org.jeffpiazza.derbynet.extras"/>
        <arg value="--version"/>
        <arg value="1.0"/>
        <arg value="derbynet.extras.pkg"/>
    </exec>
    <delete dir="ROOT"/>
</target>

<target name="dist.mac" if="is_mac" description="Full Macintosh installer package"
    depends="mac.installer.website,
                mac.installer.timer,
                 mac.installer.docs, mac.installer.extras,
                 generated-version.inc,
                 generated-build-date.inc,
                 release-series, generated-commit-hash.inc">
    <mkdir dir="RESOURCES"/>
    <copy file="website/Images/Generic/emblem.png" todir="RESOURCES"/>
    <!-- copy file="installer/mac/welcome.html" todir="RESOURCES"/ -->
    <copy file="installer/mac/README.html" todir="RESOURCES"/>

    <exec executable="/usr/bin/productbuild">
        <arg value="--distribution"/>
        <arg value="installer/mac/Distribution.xml"/>
        <arg value="--resources"/>
        <arg value="RESOURCES"/>
        <arg value="../DerbyNet-${release-series}-${git-rev-count}${git-dirty}-${DSTAMP}.pkg"/>
    </exec>
    <delete file="derbynet.docs.pkg"/>
    <delete file="derbynet.extras.pkg"/>
    <delete file="derbynet.timer.pkg"/>
    <delete file="derbynet.website.pkg"/>
    <delete dir="RESOURCES"/>
</target>

<target name="unpack-uniserver" if="is_windows"
    description="Runs the self-extracting archives from ${uniserver-resources} to build ${uniserver-unpacked}">
  <delete dir="${uniserver-unpacked}"/>
  <mkdir dir="${uniserver-unpacked}"/>

  <pathconvert property="controller-exe">
    <path>
      <fileset dir="${uniserver-resources}" includes="*controller*.exe"/>
    </path>
  </pathconvert>
  <exec executable="${controller-exe}" failonerror="true">
    <arg value="-y"/>
    <arg value="-o${uniserver-unpacked}"/>
  </exec>

  <pathconvert property="apache-exe">
    <path>
      <fileset dir="${uniserver-resources}" includes="*apache*.exe"/>
    </path>
  </pathconvert>
  <exec executable="${apache-exe}" failonerror="true">
    <arg value="-y"/>
    <arg value="-o${uniserver-unpacked}\UniServerZ"/>
  </exec>

  <pathconvert property="php-exe">
    <path>
      <fileset dir="${uniserver-resources}" includes="*php*.exe"/>
    </path>
  </pathconvert>
  <exec executable="${php-exe}" failonerror="true">
    <arg value="-y"/>
    <arg value="-o${uniserver-unpacked}\UniServerZ"/>
  </exec>
</target>

<target name="dist.oneclick" depends="generated, timer-jar, timer-in-browser, docs-dist"
    description="Build the &quot;one-click&quot; zip file to run Uniform Server on Windows">
  <delete dir="${uniserver-target}"/>
  <mkdir dir="${uniserver-target}"/>
  <mkdir dir="${uniserver-target}/Data"/>
  <mkdir dir="${uniserver-target}/Data/imagery"/>
  <mkdir dir="${uniserver-target}/Data/slides"/>

  <copy todir="${uniserver-target}">
    <fileset dir="${uniserver-unpacked}">
      <include name="**"/>
    </fileset>
  </copy>

  <pathconvert property="php-core-dir">
    <path>
      <dirset file="${uniserver-target}\UniServerZ\core\php*"/>
    </path>
  </pathconvert>

  <loadresource property="php-version">
      <propertyresource name="php-core-dir"/>
      <filterchain>
          <tokenfilter>
              <filetokenizer/>
              <replaceregex pattern=".*\\" flags="g"/>
              <replaceregex pattern=".*/" flags="g"/>
          </tokenfilter>
      </filterchain>
  </loadresource>

  <replaceregexp file="${uniserver-target}\UniServerZ\home\us_config\us_user.ini"
         match="US_ROOT_SSL=.*"
         replace="US_ROOT_SSL=./www"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\home\us_config\us_user.ini"
         match="PHP_SELECT=php[0-9]*"
         replace="PHP_SELECT=${php-version}"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\home\us_config\us_user.ini"
         match="DISPLAY_PAGE_2=yes"
         replace="DISPLAY_PAGE_2=no"/>

  <replaceregexp file="${uniserver-target}\UniServerZ\core/apache2/conf/httpd.conf"
         byline="true"
         match="^(Define.*PHP_SELECT.*)"
         replace="${line.separator}PassEnv DERBYNET_CONFIG_DIR DERBYNET_DATA_DIR${line.separator}${line.separator}\1"/>
  <fixcrlf file="${uniserver-target}\UniServerZ\core/apache2/conf/httpd.conf" eol="dos"/>

  <replaceregexp file="${uniserver-target}\UniServerZ\home\us_config\us_config.ini"
           byline="true"
           match="^\[ENV_VARS\]"
           replace="[ENV_VARS]${line.separator}DERBYNET_DATA_DIR=%UniConPath%\\\\..\\\\Data"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\home\us_config\us_config.ini"
           byline="true"
           match="^\[ENV_VARS\]"
           replace="[ENV_VARS]${line.separator}DERBYNET_CONFIG_DIR=%UniConPath%\\\\www\\\\local"/>
  <fixcrlf file="${uniserver-target}\UniServerZ\home\us_config\us_config.ini" eol="dos"/>

  <replaceregexp file="${uniserver-target}\UniServerZ\core\${php-version}\php_production.ini"
         match=";(extension=.*pdo_odbc.*)"
         replace="\1"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\core\${php-version}\php_production.ini"
         match=";(extension=.*pdo_sqlite.*)"
         replace="\1"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\core\${php-version}\php_production.ini"
         match=";(extension=sqlite3.*)"
         replace="\1"/>
  <replaceregexp file="${uniserver-target}\UniServerZ\core\${php-version}\php_production.ini"
         match=";(extension=odbc.*)"
         replace="\1"/>

  <delete>
    <!-- Delete .htaccess, favicon.ico, and other cruft -->
    <fileset dir="${uniserver-target}\UniServerZ\www"
         includes="**"/>
  </delete>
  <copy todir="${uniserver-target}\UniServerZ\www">
    <fileset dir="website">
      <exclude name="local/**"/>
    </fileset>
  </copy>
  <mkdir dir="${uniserver-target}\UniServerZ\www\local"/>

  <copy todir="${uniserver-target}">
    <fileset dir="${timer-jar-dir}">
      <include name="*.jar"/>
    </fileset>
  </copy>

  <copy todir="${uniserver-target}\docs">
    <fileset dir="docs/dist">
      <include name="**"/>
    </fileset>
  </copy>

  <copy todir="${uniserver-target}\installers">
    <fileset dir="${uniserver-resources}">
      <include name="*.exe"/>
      <exclude name="Zero*"/>
    </fileset>
  </copy>

  <copy todir="${uniserver-target}">
    <fileset dir="installer/win">
      <include name="README"/>
    </fileset>
  </copy>

  <zip destfile="../DerbyNet-${release-series}-${git-rev-count}${git-dirty}-${DSTAMP}.win.zip">
    <fileset dir="${uniserver-target}">
      <include name="**"/>
    </fileset>
  </zip>
  <delete dir="${uniserver-target}"/>
  <delete dir="dist"/>
</target>

<target name="docker-deps" depends="generated, timer-in-browser"
        description="Builds prerequisites for building derbynet_server docker image">
</target>

<target name="demo" description="demo">
    <ant dir="demo"/>
</target>

</project>
